<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>叶渝泽de博客</title>
  
  <subtitle>我的幻想更宽，寂寞也就更大了。～～苍山雪,洱海月,洱海月照苍山雪。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-06T08:31:45.714Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>叶渝泽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>direcitve实现输入限制</title>
    <link href="http://yoursite.com/2018/12/06/AngularJS/"/>
    <id>http://yoursite.com/2018/12/06/AngularJS/</id>
    <published>2018-12-06T08:10:52.000Z</published>
    <updated>2018-12-06T08:31:45.714Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>&#160; &#160; &#160; &#160;自定义的directive js服务,用来实现文本框的输入数字限制<br><!-- toc --></p><a id="more"></a><h2 id="三种输入限制，有缺陷，仅供参考"><a href="#三种输入限制，有缺陷，仅供参考" class="headerlink" title="三种输入限制，有缺陷，仅供参考"></a>三种输入限制，有缺陷，仅供参考</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.directive(&apos;price&apos;, function ($parse) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        restrict: &apos;A&apos;,</span><br><span class="line">        link: function (scope, element, attrs, ctrl) &#123;</span><br><span class="line"></span><br><span class="line">            function limit() &#123;</span><br><span class="line">                var limitV = element[0].value;</span><br><span class="line">                limitV = limitV.replace(/[^0-9.]/g, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">                if ((/^0+[0-9]+$/).test(limitV)) &#123;</span><br><span class="line">                    limitV = limitV.replace(/\b(0+)/gi, &quot;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                element[0].value = limitV;</span><br><span class="line">                $parse(attrs[&apos;ngModel&apos;]).assign(scope, limitV);</span><br><span class="line">                format();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            function format() &#123;</span><br><span class="line">                var formatV = element[0].value;</span><br><span class="line">                var array = new Array();</span><br><span class="line">                array = formatV.split(&quot;.&quot;);</span><br><span class="line">                var re = /(-?\d+)(\d&#123;3&#125;)/;</span><br><span class="line">                if (array[0].length &gt; 14) &#123;</span><br><span class="line">                    array[0] = (&quot;&quot; + array[0]).substring(0, 14);</span><br><span class="line">                &#125;</span><br><span class="line">                if (array[1] != undefined &amp;&amp; array[1].length &gt; 2) &#123;</span><br><span class="line">                    array[1] = (&quot;&quot; + array[1]).substring(0, 2);</span><br><span class="line">                &#125;</span><br><span class="line">                while (re.test(array[0])) &#123;</span><br><span class="line">                    array[0] = array[0].replace(re, &quot;$1,$2&quot;)</span><br><span class="line">                &#125;</span><br><span class="line">                var returnV = array[0];</span><br><span class="line">                for (var i = 1; i &lt; array.length; i++) &#123;</span><br><span class="line">                    returnV += &quot;.&quot; + array[i];</span><br><span class="line">                &#125;</span><br><span class="line">                element[0].value = returnV;</span><br><span class="line">                $parse(attrs[&apos;ngModel&apos;]).assign(scope, formatV);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            scope.$watch(attrs.ngModel, function () &#123;</span><br><span class="line">                limit();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.directive(&apos;float&apos;, function ($parse) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        restrict: &apos;A&apos;,</span><br><span class="line">        link: function (scope, element, attrs, ctrl) &#123;</span><br><span class="line"></span><br><span class="line">            function limit() &#123;</span><br><span class="line">                var limitV = element[0].value;</span><br><span class="line">                limitV = limitV.replace(/[^0-9.]/g, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">                if ((/^0+[0-9]+$/).test(limitV)) &#123;</span><br><span class="line">                    limitV = limitV.replace(/\b(0+)/gi, &quot;&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">                element[0].value = limitV;</span><br><span class="line">                $parse(attrs[&apos;ngModel&apos;]).assign(scope, limitV);</span><br><span class="line">                format();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            function format() &#123;</span><br><span class="line">                var formatV = element[0].value;</span><br><span class="line">                var array = new Array();</span><br><span class="line">                array = formatV.split(&quot;.&quot;);</span><br><span class="line">                if (array[0].length &gt; 1) &#123;</span><br><span class="line">                    array[0] = (&quot;&quot; + array[0]).substring(0, 2);</span><br><span class="line">                &#125;</span><br><span class="line">                if (array[1] != undefined &amp;&amp; array[1].length &gt; 2) &#123;</span><br><span class="line">                    array[1] = (&quot;&quot; + array[1]).substring(0, 2);</span><br><span class="line">                &#125;</span><br><span class="line">                var returnV = array[0];</span><br><span class="line">                for (var i = 1; i &lt; array.length; i++) &#123;</span><br><span class="line">                    returnV += &quot;.&quot; + array[i];</span><br><span class="line">                &#125;</span><br><span class="line">                element[0].value = returnV;</span><br><span class="line">                $parse(attrs[&apos;ngModel&apos;]).assign(scope, formatV);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            scope.$watch(attrs.ngModel, function () &#123;</span><br><span class="line">                limit();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">.directive(&apos;integer&apos;, function ($parse) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        restrict: &apos;A&apos;,</span><br><span class="line">        link: function (scope, element, attrs, ctrl) &#123;</span><br><span class="line"></span><br><span class="line">            function limit() &#123;</span><br><span class="line">                var v = element[0].value || &apos;&apos;;</span><br><span class="line">                v = v.replace(/[^\d]/g, &apos;&apos;);</span><br><span class="line">                element[0].value = v.substr(0, 8);;</span><br><span class="line">                $parse(attrs[&apos;ngModel&apos;]).assign(scope, v);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            scope.$watch(attrs.ngModel, function () &#123;</span><br><span class="line">                limit();</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;自定义的directive js服务,用来实现文本框的输入数字限制&lt;br&gt;&lt;!-- toc --&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="http://yoursite.com/categories/JS/"/>
    
    
      <category term="AngularJS" scheme="http://yoursite.com/tags/AngularJS/"/>
    
  </entry>
  
  <entry>
    <title>spring学习</title>
    <link href="http://yoursite.com/2018/08/29/spring%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/08/29/spring学习/</id>
    <published>2018-08-29T08:19:52.000Z</published>
    <updated>2018-12-06T09:06:08.740Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><p>&#160; &#160; &#160; &#160;开始对spring进行学习和归纳</p><a id="more"></a><!-- toc --><h2 id="spring模块结构"><a href="#spring模块结构" class="headerlink" title="spring模块结构"></a>spring模块结构</h2><p><img src="/image/spring模块结构.png" alt="spring模块结构"></p><h3 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h3><h4 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h4><p>&#160; &#160; &#160;这是一个最简单的容器，它最主要的功能是为依赖注入提供支持，这个容器接口在org.springframework.beans.factory.BeanFactory中被定义。</p><p>&#160; &#160; &#160; &#160;在Spring中，有大量对BeanFactory接口的实现。其中，最常被使用的是XmlBeanFactory类。这个容器从XML文件中读取配置元数据，由这些元数据来生成一个被配置化的系统或者应用。</p><p>&#160; &#160; &#160; &#160;在资源宝贵的移动设备或者基于 applet 的应用当中， BeanFactory 会被优先选择。否则，一般使用的是ApplicationContext，除非你有更好的理由选择 BeanFactory。</p><h4 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><p>&#160; &#160; &#160; &#160;在idea中创建一个java web程序(创建过程请参考：<a href="https://www.cnblogs.com/shindo/p/7272646.htmlv" target="_blank" rel="noopener">Intellij Idea 2017创建web项目及tomcat部署实战</a>)，程序名SpringDemo，在WEB-INF文件夹下创建classes文件夹和lib文件夹，在src文件夹下创建一个包com.springDemo。</p><p>&#160; &#160; &#160; &#160;在包com.springDemo下创建HelloWorld.java和Main.java，在src文件夹下创建Beans.xml</p><h5 id="HelloWorld-java"><a href="#HelloWorld-java" class="headerlink" title="HelloWorld.java"></a>HelloWorld.java</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.springDemo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class HelloWorld&#123;</span><br><span class="line">String word;</span><br><span class="line">//idea下按alt+Insert创建get和set方法，此处省略</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="main-java"><a href="#main-java" class="headerlink" title="main.java"></a>main.java</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.springDemo</span><br><span class="line">import org.springframework.beans.factory.InitializingBean;</span><br><span class="line">import org.springframework.beans.factory.xml.XmlBeanFactory;</span><br><span class="line">import org.springframework.core.io.ClassPathResource;</span><br><span class="line"></span><br><span class="line">public class Main&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">XmlBeanFactory factory = new XmlBeanFactory(new ClassPathResource(&quot;Beans.xml&quot;));</span><br><span class="line">HelloWorld hw = (HelloWorld) factory.getBean(&quot;helloWorld&quot;);</span><br><span class="line">System.out.println(hw.getWord());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Beans-xml"><a href="#Beans-xml" class="headerlink" title="Beans.xml"></a>Beans.xml</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line">    &lt;bean id=&quot;helloWorld&quot; class=&quot;com.springDemo.HelloWorld&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;word&quot; value=&quot;Hello World~&quot; /&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;beans&gt;</span><br></pre></td></tr></table></figure><p>&#160; &#160; &#160; &#160;运行main.java，结果如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello World~</span><br></pre></td></tr></table></figure><h4 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h4><p>&#160; &#160; &#160; &#160;ApplicationContext是spring中比较高级的容器。和BeanFactory类似，它可以加载配置文件中定义的bean，将所有的bean集中在一起，在请求的时候分配bean。另外，它增加了企业所需要的功能，比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。这个容器在org.springframework.context.ApplicationContext interface接口中定义。</p><p>&#160; &#160; ApplicationContext包含了BeanFactory所有的功能，一般情况下都使用更优秀的ApplicationContext容器，但在轻量级应用中，比如移动设备和基于applet的应用程序中使用BeanFactory。</p><p>&#160; &#160; &#160; &#160;最常被使用的 ApplicationContext 接口实现：</p><ul><li><p>FileSystemXmlApplicationContext：该容器从 XML 文件中加载已被定义的 bean。在这里，你需要提供给构造器 XML 文件的完整路径。</p></li><li><p>ClassPathXmlApplicationContext：该容器从 XML 文件中加载已被定义的 bean。在这里，你不需要提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可，因为，容器会从 CLASSPATH 中搜索 bean 配置文件。</p></li><li><p>WebXmlApplicationContext：该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。</p></li></ul><h4 id="一个简单的例子-1"><a href="#一个简单的例子-1" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h4><h5 id="FileSystemXmlApplicationContext"><a href="#FileSystemXmlApplicationContext" class="headerlink" title="FileSystemXmlApplicationContext"></a>FileSystemXmlApplicationContext</h5><p>&#160; &#160; &#160; &#160;只需要按下面的代码更改上一节中main方法中的内容就行了，再导入相关的包就行了。导包就不在此叙述了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = new FileSystemXmlApplicationContext</span><br><span class="line">      (&quot;src/Beans.xml&quot;);</span><br><span class="line">HelloWorld obj = (HelloWorld) context.getBean(&quot;helloWorld&quot;);</span><br><span class="line">obj.getMessage();</span><br></pre></td></tr></table></figure></p><h5 id="ClassPathXmlApplicationContext"><a href="#ClassPathXmlApplicationContext" class="headerlink" title="ClassPathXmlApplicationContext"></a>ClassPathXmlApplicationContext</h5><p>&#160; &#160; &#160; &#160;同上，不过你得保证你的xml文件路径能被classpath找到，我就在这里被坑了一下，解决办法是：将Beans.xml文件复制在WEB-INF/classes文件夹下，原因是这是classpath的根路径。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext context = new ClassPathXmlApplicationContext</span><br><span class="line">      (&quot;Beans.xml&quot;);</span><br><span class="line">HelloWorld obj = (HelloWorld) context.getBean(&quot;helloWorld&quot;);</span><br><span class="line">obj.getMessage();</span><br></pre></td></tr></table></figure></p><h5 id="WebXmlXmlApplicationContext"><a href="#WebXmlXmlApplicationContext" class="headerlink" title="WebXmlXmlApplicationContext"></a>WebXmlXmlApplicationContext</h5><p>&#160; &#160; &#160; &#160;由于WebXmlXmlApplicationContext在一个web应用程序的范围内加载bean。因此我这里就不演示了（其实我也不会 (*~m~)）。</p><h4 id="Bean的作用域"><a href="#Bean的作用域" class="headerlink" title="Bean的作用域"></a>Bean的作用域</h4><p>&#160; &#160; &#160; &#160;当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。例如，为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 prototype。同理，如果你想让 Spring 在每次需要时都返回同一个bean实例，你应该声明 bean 的作用域的属性为 singleton。</p><ul><li>singleton     &#160; &#160; &#160; &#160; 在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</li><li>prototype     &#160; &#160; &#160; &#160; 每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</li><li>request  &#160; &#160;每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</li><li>session&#160; &#160; &#160; &#160; 同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</li><li>global-session  &#160; &#160; &#160; &#160; 一般用于Portlet应用环境，改作用于仅适用于WebApplicationContext环境</li></ul><h5 id="scope使用方法"><a href="#scope使用方法" class="headerlink" title="scope使用方法"></a>scope使用方法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;helloWorld&quot; class=&quot;com.tutorialspoint.HelloWorld&quot; </span><br><span class="line">      scope=&quot;singleton&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>&#160; &#160; &#160; &#160;你可以简单地实现上述接口和初始化工作可以在 afterPropertiesSet() 方法中执行，如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ExampleBean implements InitializingBean &#123;</span><br><span class="line">   public void afterPropertiesSet() &#123;</span><br><span class="line">      // do some initialization work</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;<br>在基于 XML 的配置元数据的情况下，你可以使用 init-method 属性来指定带有 void 无参数方法的名称。例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;exampleBean&quot; </span><br><span class="line">         class=&quot;examples.ExampleBean&quot; init-method=&quot;init&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;下面是类的定义：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ExampleBean &#123;</span><br><span class="line">   public void init() &#123;</span><br><span class="line">      // do some initialization work</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="销毁"><a href="#销毁" class="headerlink" title="销毁"></a>销毁</h5><p>&#160; &#160; &#160; &#160;你可以简单地实现上述接口并且结束工作可以在 destroy() 方法中执行，如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ExampleBean implements DisposableBean &#123;</span><br><span class="line">   public void destroy() &#123;</span><br><span class="line">      // do some destruction work</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;在基于 XML 的配置元数据的情况下，你可以使用 destroy-method 属性来指定带有 void 无参数方法的名称。例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;exampleBean&quot;</span><br><span class="line">         class=&quot;examples.ExampleBean&quot; destroy-method=&quot;destroy&quot;/&gt;</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;下面是类的定义：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ExampleBean &#123;</span><br><span class="line">   public void destroy() &#123;</span><br><span class="line">      // do some destruction work</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="下面是例子"><a href="#下面是例子" class="headerlink" title="下面是例子"></a>下面是例子</h5><p>xml文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;helloWorld&quot; </span><br><span class="line">       class=&quot;com.tutorialspoint.HelloWorld&quot;</span><br><span class="line">       init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;</span><br><span class="line">       &lt;property name=&quot;message&quot; value=&quot;Hello World!&quot;/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br></pre></td></tr></table></figure></p><p>HelloWorld文件：添加下列方法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public void init()&#123;</span><br><span class="line">      System.out.println(&quot;Bean is going through init.&quot;);</span><br><span class="line">   &#125;</span><br><span class="line">   public void destroy()&#123;</span><br><span class="line">      System.out.println(&quot;Bean will destroy now.&quot;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>&#160; &#160; &#160; &#160;下面是 Main.java 文件的内容。在这里，你需要注册一个在 AbstractApplicationContext 类中声明的关闭 hook 的 registerShutdownHook() 方法。它将确保正常关闭，并且调用相关的 destroy 方法。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AbstractApplicationContext context = new ClassPathXmlApplicationContext(&quot;Beans.xml&quot;);</span><br><span class="line">      HelloWorld obj = (HelloWorld) context.getBean(&quot;helloWorld&quot;);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">      context.registerShutdownHook();</span><br></pre></td></tr></table></figure></p><h5 id="默认的初始化和销毁方法"><a href="#默认的初始化和销毁方法" class="headerlink" title="默认的初始化和销毁方法"></a>默认的初始化和销毁方法</h5><p>&#160; &#160; &#160; &#160;如果你有太多具有相同名称的初始化或者销毁方法的 Bean，那么你不需要在每一个 bean 上声明初始化方法和销毁方法。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span><br><span class="line">    default-init-method=&quot;init&quot; </span><br><span class="line">    default-destroy-method=&quot;destroy&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line">       &lt;!-- collaborators and configuration for this bean go here --&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></p><h4 id="定义继承"><a href="#定义继承" class="headerlink" title="定义继承"></a>定义继承</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id=&quot;helloIndia&quot; class=&quot;com.tutorialspoint.HelloIndia&quot; parent=&quot;helloWorld&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;开始对spring进行学习和归纳&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>Springboot Mybatis实例</title>
    <link href="http://yoursite.com/2018/08/28/Springboot-Mybatis%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2018/08/28/Springboot-Mybatis实例/</id>
    <published>2018-08-28T06:38:55.000Z</published>
    <updated>2018-12-06T08:37:05.571Z</updated>
    
    <content type="html"><![CDATA[<!-- toc --><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&#160; &#160; &#160; &#160;作为刚入职的小菜鸟，需要学的东西很多，最近开始看框架方面的知识，了解到目前使用比较多的框架，springboot+Mybatis就是其中一个，这篇文章就是为了整理一下springboot+Mybatis框架使用的知识，写一个小demo，不足之处希望各位指点。</p><a id="more"></a><!-- toc --><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>&#160; &#160; &#160; &#160;首先，你需要安装和配置一下java环境、安装mqsql数据库以及一个用来编译的IDE工具（我这里用的是idea）还有maven安装和配置（不过idea自动集成了maven，我这里就不要额外装了，eclipse用户记得自己装一下哦），这个过程网上的教程很多，我这里就不多叙述了。</p><p>&#160; &#160; &#160; &#160;其次，你需要新建一个maven项目，maven是一个项目管理和综合工具。Maven提供了开发人员构建一个完整的声明周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。</p><p>&#160; &#160; &#160; &#160;而凭本人目前粗浅的使用理解，Maven是一个项目管理工具（用来打包和导包等功能，关于Maven的详细内容请参考：<a href="https://www.cnblogs.com/whgk/p/7112560.html" target="_blank" rel="noopener">maven到底是个啥玩意~</a>和<a href="https://blog.csdn.net/wymrdjm/article/details/78695956" target="_blank" rel="noopener">最详细的maven教程</a>，本着兼听则明的原则，我给放了两篇参考文章，没有意外的话，可能我以后都会一次性放两篇，嗯~ 你们要是嫌多就自己挑一篇看看吧），比如导包：通过在pom.xml文件中写入需要的相关项目依赖，它就会从本地仓库或者远程仓库导入你所需要的jar包，这样就可以节省你找包的时间，而idea通过创建spring项目中的勾选项，直接自动帮你在pom.xml中写入相关依赖，进一步免去了你去寻找相关依赖和相关依赖版本的痛苦。所以我极力推荐使用idea，如果你有校园邮箱，那就更推荐了。（校园邮箱申请免费使用idea的教程自己百度吧╮(￣▽ ￣)╭）</p><h3 id="pom-xml文件相关依赖"><a href="#pom-xml文件相关依赖" class="headerlink" title="pom.xml文件相关依赖"></a>pom.xml文件相关依赖</h3><div><div class="fold_hider"><div class="close hider_title">点击显示</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line"></span><br><span class="line">    &lt;groupId&gt;com.writezhou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springboot2-mybatis-demo&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line"></span><br><span class="line">    &lt;name&gt;springboot2-mybatis-demo&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line"></span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.0.4.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;</span><br><span class="line">        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!--&lt;dependency&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;--&gt;</span><br><span class="line">            &lt;!--&amp;lt;!&amp;ndash; 移除嵌入式tomcat插件 &amp;ndash;&amp;gt;--&gt;</span><br><span class="line">            &lt;!--&lt;exclusions&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;exclusion&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;--&gt;</span><br><span class="line">                    &lt;!--&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;--&gt;</span><br><span class="line">                &lt;!--&lt;/exclusion&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;/exclusions&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;/dependency&gt;--&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--&lt;dependency&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;groupId&gt;javax.servlet&lt;/groupId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;version&gt;3.1.0&lt;/version&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;scope&gt;provided&lt;/scope&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;/dependency&gt;--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.datatype&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-datatype-joda&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.fasterxml.jackson.module&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jackson-module-parameter-names&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 分页插件 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.5&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- alibaba的druid数据库连接池 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.9&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.2.40&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;5.0.4.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;!-- 热启动插件 --&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!-- 支持devtools --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 没有该配置,devtools不生效 --&gt;</span><br><span class="line">                    &lt;fork&gt;true&lt;/fork&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure></div></div><p>&#160;<br>&#160; &#160; &#160; &#160;关于以上依赖包的作用我就不一一介绍了，自己查找一下吧(代码复制、折叠、高亮功能请参考<a href="http://www.missfli.com/2018/06/19/github-hexo-next-08.html#more" target="_blank" rel="noopener">Hexo NexT主题代码块添加复制功能</a> 、<a href="https://www.cnblogs.com/woshimrf/p/hexo-fold-block.html" target="_blank" rel="noopener">Hexo next博客添加折叠块功能添加折叠代码块</a> 及 <a href="https://blog.csdn.net/u011240016/article/details/79422448" target="_blank" rel="noopener">next主题设定代码高亮格式</a>)</p><h3 id="yml文件配置"><a href="#yml文件配置" class="headerlink" title="yml文件配置"></a>yml文件配置</h3><div><div class="fold_hider"><div class="close hider_title">点击显示</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8888</span><br><span class="line">  tomcat:</span><br><span class="line">    uri-encoding: UTF-8</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line">    cache: false</span><br><span class="line">  freemarker:</span><br><span class="line">    cache: false</span><br><span class="line">    settings:</span><br><span class="line">      template_update_delay: 0</span><br><span class="line">  groovy:</span><br><span class="line">    template:</span><br><span class="line">      cache: false</span><br><span class="line">  velocity:</span><br><span class="line">    cache: false</span><br><span class="line">  datasource:</span><br><span class="line">    name: mysql_test</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    #driud相关配置</span><br><span class="line">    druid:</span><br><span class="line">      #监控统计的拦截的filters</span><br><span class="line">      filter: stat</span><br><span class="line">      driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">      #基本属性</span><br><span class="line">      url: jdbc:mysql://127.0.0.1:3306/mytest?useUnicode=true&amp;characterEncoding=UTF-8&amp;allowMultiQueries=true</span><br><span class="line">      username: root</span><br><span class="line">      password: zhouhao12</span><br><span class="line">      #配置初始化大小/最小/最大</span><br><span class="line">      initial-size: 1</span><br><span class="line">      min-idle: 1</span><br><span class="line">      max-active: 20</span><br><span class="line">      #获取连接等待超时时间</span><br><span class="line">      max-wait: 60000</span><br><span class="line">      #间隔多久进行一次检测，检测需要关闭的空闲连接</span><br><span class="line">      time-between-eviction-runs-millis: 60000</span><br><span class="line">      #一个连接在池中最小生存的时间</span><br><span class="line">      min-evictable-idle-time-millis: 300000</span><br><span class="line">      validation-query: SELECT &apos;x&apos;</span><br><span class="line">      test-while-idle: true</span><br><span class="line">      test-on-borrow: false</span><br><span class="line">      test-on-return: false</span><br><span class="line">      #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false</span><br><span class="line">      pool-prepared-statements: false</span><br><span class="line">      max-pool-prepared-statement-per-connection-size: 20</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 该配置节点为独立的节点，有很多同学容易将这个配置放在spring的节点下，导致配置无法被识别</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/UserMapper.xml  #注意：一定要对应mapper映射xml文件的所在路径</span><br><span class="line">  type-aliases-package: com.writezhou.model  # 注意：对应实体类的路径</span><br><span class="line"></span><br><span class="line">#pagehelper</span><br><span class="line">pagehelper:</span><br><span class="line">  helperDialect: mysql</span><br><span class="line">  reasonable: true</span><br><span class="line">  supportMethodsArguments: true</span><br><span class="line">  params: count=countSql</span><br><span class="line">  returnPageInfo: check</span><br></pre></td></tr></table></figure></div></div><p>&nbsp;<br>&#160; &#160; &#160; &#160; yml文件中配置了服务端口号及端口编码，spring driud连接池，mybatis，pagehelper</p><h2 id="各层次文件的相关代码"><a href="#各层次文件的相关代码" class="headerlink" title="各层次文件的相关代码"></a>各层次文件的相关代码</h2><h3 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h3><div><div class="fold_hider"><div class="close hider_title">UserController.java</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.writezhou.controller;</span><br><span class="line"></span><br><span class="line">import com.writezhou.model.UserDomain;</span><br><span class="line">import com.writezhou.service.user.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Created by Administrator on 2017/8/16.</span><br><span class="line">     */</span><br><span class="line">    @Controller</span><br><span class="line">    @RequestMapping(value = &quot;/user&quot;)</span><br><span class="line">    public class UserController &#123;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 对类成员变量、方法及构造函数进行标注，完成自动装配的工作</span><br><span class="line">         * 消除 set ，get方法</span><br><span class="line">         */</span><br><span class="line">        @Autowired</span><br><span class="line">        private UserService userService;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 添加成员</span><br><span class="line">         * @param user</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        @ResponseBody</span><br><span class="line">        @PostMapping(&quot;/add&quot;)</span><br><span class="line">        public int addUser(UserDomain user)&#123;</span><br><span class="line">            return userService.addUser(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 通过userName查询成员</span><br><span class="line">         * @param userName</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        @ResponseBody</span><br><span class="line">        @PostMapping(&quot;/subn&quot;)</span><br><span class="line">        public UserDomain subn(String userName)&#123;</span><br><span class="line">            return userService.findUserByName(userName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 删除成员</span><br><span class="line">         * @param user</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        @ResponseBody</span><br><span class="line">        @PostMapping(&quot;/del&quot;)</span><br><span class="line">        public int delUser(UserDomain user)&#123;</span><br><span class="line">            return userService.delUser(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 更新成员信息</span><br><span class="line">         * @param user</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        @ResponseBody</span><br><span class="line">        @PostMapping(&quot;/upt&quot;)</span><br><span class="line">        public int uptUser(UserDomain user)&#123;</span><br><span class="line">            return userService.uptUser(user);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 查询所有成员信息</span><br><span class="line">         * @param pageNum</span><br><span class="line">         * @param pageSize</span><br><span class="line">         * @return</span><br><span class="line">         */</span><br><span class="line">        @ResponseBody</span><br><span class="line">        @GetMapping(&quot;/all&quot;)</span><br><span class="line">        public Object findAllUser(</span><br><span class="line">                @RequestParam(name = &quot;pageNum&quot;, required = false, defaultValue = &quot;1&quot;)</span><br><span class="line">                        int pageNum,</span><br><span class="line">                @RequestParam(name = &quot;pageSize&quot;, required = false, defaultValue = &quot;10&quot;)</span><br><span class="line">                        int pageSize)&#123;</span><br><span class="line">            return userService.findAllUser(pageNum,pageSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="UserServive"><a href="#UserServive" class="headerlink" title="UserServive"></a>UserServive</h3><div><div class="fold_hider"><div class="close hider_title">UserServive.java</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.writezhou.service.user;</span><br><span class="line"></span><br><span class="line">import com.github.pagehelper.PageInfo;</span><br><span class="line">import com.writezhou.model.UserDomain;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Administrator on 2018/4/19.</span><br><span class="line"> */</span><br><span class="line">public interface UserService &#123;</span><br><span class="line">    int addUser(UserDomain user);</span><br><span class="line"></span><br><span class="line">    PageInfo&lt;UserDomain&gt; findAllUser(int pageNum, int pageSize);</span><br><span class="line"></span><br><span class="line">    UserDomain findUserByName(String userName);</span><br><span class="line"></span><br><span class="line">    int delUser(UserDomain user);</span><br><span class="line"></span><br><span class="line">    int uptUser(UserDomain user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="UserServiceImpl"><a href="#UserServiceImpl" class="headerlink" title="UserServiceImpl"></a>UserServiceImpl</h3><div><div class="fold_hider"><div class="close hider_title">UserSeriveImpl.java</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.writezhou.service.user.impl;</span><br><span class="line"></span><br><span class="line">import com.github.pagehelper.PageHelper;</span><br><span class="line">import com.github.pagehelper.PageInfo;</span><br><span class="line">import com.writezhou.dao.UserDao;</span><br><span class="line">import com.writezhou.model.UserDomain;</span><br><span class="line">import com.writezhou.service.user.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service(value = &quot;userService&quot;)</span><br><span class="line">public class UserServiceImpl implements UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserDao userDao;//这里会报错，但是并不会影响</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int addUser(UserDomain user) &#123;</span><br><span class="line">        return userDao.insert(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * 这个方法中用到了我们开头配置依赖的分页插件pagehelper</span><br><span class="line">     * 很简单，只需要在service层传入参数，然后将参数传递给一个插件的一个静态方法即可；</span><br><span class="line">     * pageNum 开始页数</span><br><span class="line">     * pageSize 每页显示的数据条数</span><br><span class="line">     * */</span><br><span class="line">    @Override</span><br><span class="line">    public PageInfo&lt;UserDomain&gt; findAllUser(int pageNum, int pageSize) &#123;</span><br><span class="line">        //将参数传给这个方法就可以实现物理分页了，非常简单。</span><br><span class="line">        PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">        List&lt;UserDomain&gt; userDomains = userDao.selectUsers();</span><br><span class="line">        PageInfo result = new PageInfo(userDomains);</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserDomain findUserByName(String userName) &#123;</span><br><span class="line">        UserDomain userDomain=userDao.selectUserByName(userName);</span><br><span class="line">        UserDomain result = userDomain;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int delUser(UserDomain user) &#123;</span><br><span class="line">        return userDao.delete(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int uptUser(UserDomain user) &#123;</span><br><span class="line">        return userDao.update(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="UserDao"><a href="#UserDao" class="headerlink" title="UserDao"></a>UserDao</h3><div><div class="fold_hider"><div class="close hider_title">UserDao.java</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.writezhou.dao;</span><br><span class="line"></span><br><span class="line">import com.writezhou.model.UserDomain;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line"></span><br><span class="line">    int insert(UserDomain record);</span><br><span class="line"></span><br><span class="line">    UserDomain selectUserByName(String userName);</span><br><span class="line"></span><br><span class="line">    List&lt;UserDomain&gt; selectUsers();</span><br><span class="line"></span><br><span class="line">    int delete(UserDomain user);</span><br><span class="line"></span><br><span class="line">    int update(UserDomain user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="UserDomain"><a href="#UserDomain" class="headerlink" title="UserDomain"></a>UserDomain</h3><div><div class="fold_hider"><div class="close hider_title">UserDomain.java</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.writezhou.model;</span><br><span class="line"></span><br><span class="line">public class UserDomain &#123;</span><br><span class="line">    private int userId;</span><br><span class="line"></span><br><span class="line">    private String userName;</span><br><span class="line"></span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    private String phone;</span><br><span class="line"></span><br><span class="line">    public int getUserId() &#123;</span><br><span class="line">        return userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserId(int userId) &#123;</span><br><span class="line">        this.userId = userId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getUserName() &#123;</span><br><span class="line">        return userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setUserName(String userName) &#123;</span><br><span class="line">        this.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPassword() &#123;</span><br><span class="line">        return password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPassword(String password) &#123;</span><br><span class="line">        this.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getPhone() &#123;</span><br><span class="line">        return phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setPhone(String phone) &#123;</span><br><span class="line">        this.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="Springboot2MybatisDemoApplication"><a href="#Springboot2MybatisDemoApplication" class="headerlink" title="Springboot2MybatisDemoApplication"></a>Springboot2MybatisDemoApplication</h3><p>添加相关注解<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@RestController</span><br><span class="line">@MapperScan(&quot;com.writezhou.dao&quot;)</span><br></pre></td></tr></table></figure></p><h3 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h3><div><div class="fold_hider"><div class="close hider_title">UserMapper.xml</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;</span><br><span class="line">&lt;!--映射dao层类名--&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.writezhou.dao.UserDao&quot;&gt;</span><br><span class="line">    &lt;!--表名--&gt;</span><br><span class="line">    &lt;sql id=&quot;BASE_TABLE&quot;&gt;t_user&lt;/sql&gt;</span><br><span class="line">    &lt;!--表内属性--&gt;</span><br><span class="line">    &lt;sql id=&quot;BASE_COLUMN&quot;&gt;userId,userName,password,phone&lt;/sql&gt;</span><br><span class="line">    &lt;!--表对应对象--&gt;</span><br><span class="line">    &lt;insert id=&quot;insert&quot; parameterType=&quot;com.writezhou.model.UserDomain&quot;&gt;</span><br><span class="line">        INSERT INTO</span><br><span class="line">        &lt;include refid=&quot;BASE_TABLE&quot;/&gt;</span><br><span class="line">        &lt;trim prefix=&quot;(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">            userName,password,</span><br><span class="line">            &lt;if test=&quot;phone != null&quot;&gt;</span><br><span class="line">                phone,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/trim&gt;</span><br><span class="line">        &lt;trim prefix=&quot;VALUES(&quot; suffix=&quot;)&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">            #&#123;userName, jdbcType=VARCHAR&#125;,#&#123;password, jdbcType=VARCHAR&#125;,</span><br><span class="line">            &lt;if test=&quot;phone != null&quot;&gt;</span><br><span class="line">                #&#123;phone, jdbcType=VARCHAR&#125;,</span><br><span class="line">            &lt;/if&gt;</span><br><span class="line">        &lt;/trim&gt;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;delete id=&quot;delete&quot; parameterType=&quot;com.writezhou.model.UserDomain&quot;&gt;</span><br><span class="line">        DELETE FROM</span><br><span class="line">        &lt;include refid=&quot;BASE_TABLE&quot;/&gt;</span><br><span class="line">        WHERE userName = #&#123;userName, jdbcType=VARCHAR&#125;;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line"></span><br><span class="line">    &lt;update id=&quot;update&quot; parameterType=&quot;com.writezhou.model.UserDomain&quot;&gt;</span><br><span class="line">        UPDATE</span><br><span class="line">        &lt;include refid=&quot;BASE_TABLE&quot;/&gt;</span><br><span class="line">        SET userName = #&#123;userName, jdbcType=VARCHAR&#125;,</span><br><span class="line">        password = #&#123;password, jdbcType=VARCHAR&#125;,</span><br><span class="line">        phone = #&#123;phone, jdbcType=VARCHAR&#125;</span><br><span class="line">        WHERE userId = #&#123;userId&#125;;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectUsers&quot; resultType=&quot;com.writezhou.model.UserDomain&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        &lt;include refid=&quot;BASE_COLUMN&quot;/&gt;</span><br><span class="line">        FROM</span><br><span class="line">        &lt;include refid=&quot;BASE_TABLE&quot;/&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;selectUserByName&quot; resultType=&quot;com.writezhou.model.UserDomain&quot;&gt;</span><br><span class="line">        SELECT</span><br><span class="line">        &lt;include refid=&quot;BASE_COLUMN&quot;/&gt;</span><br><span class="line">        FROM</span><br><span class="line">        &lt;include refid=&quot;BASE_TABLE&quot;/&gt;</span><br><span class="line">        WHERE userName = #&#123;userName, jdbcType=VARCHAR&#125;;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure></div></div><p>&#160;<br>&#160; &#160; &#160; &#160;将上述文件中的包名全部替换成自己的包名，不替换相信ide也会提醒你出错了，还有xml文件中关于mysql数据库中的用户名和密码记得自己更换掉哦，这里不更改不会报错的，但你运行的时候就不好说了(ಡωಡ)。</p><h2 id="最后工作"><a href="#最后工作" class="headerlink" title="最后工作"></a>最后工作</h2><h3 id="新建相关数据库"><a href="#新建相关数据库" class="headerlink" title="新建相关数据库"></a>新建相关数据库</h3><p><img src="/image/新建mysql数据库.PNG" alt="新建mysql数据库"></p><h3 id="并使用postman来传输数据"><a href="#并使用postman来传输数据" class="headerlink" title="并使用postman来传输数据"></a>并使用postman来传输数据</h3><p><img src="/image/postman使用.PNG" alt="postman的使用过程截图"></p><h3 id="再提供一个打包的方法吧"><a href="#再提供一个打包的方法吧" class="headerlink" title="再提供一个打包的方法吧"></a>再提供一个打包的方法吧</h3><p>&#160;&#160;&#160;&#160;由于springboot中启动是通过自动找到springbootApplication的main函数启动的，而tomcat却不能自动找到这个main函数，所以我们还需要到一个编写一个springbootstartApplication类来告诉tomcat我需要从这里启动，以下就是这个初始化类（建立在springbootApplication.class的同级目录下就好）：</p><div><div class="fold_hider"><div class="close hider_title">SpringBootStartApplication.java</div></div><div class="fold"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import com.writezhou.Springboot2MybatisDemoApplication;</span><br><span class="line">import org.springframework.boot.builder.SpringApplicationBuilder;</span><br><span class="line">import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;</span><br><span class="line"></span><br><span class="line">public class SpringBootStartApplication extends SpringBootServletInitializer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder builder)&#123;</span><br><span class="line">        return builder.sources(Springboot2MybatisDemoApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>&#160;<br>&#160;&#160;&#160;&#160;另外，由于springboot中自动集成了tomcat容器，而我们打包成了war包后，要放在tomcat容器下运行，因此我们需要去掉自动集成的tomcat，去掉tomcat的相关依赖就在上面的pom.xml中，自己把注释去掉就行了。</p><p>&#160;&#160;&#160;&#160;然后，执行idea右侧的maven projects的lifecycle下的clean&amp;package就行了，打包好的war包在你的工程文件夹的target目录下，把war包放在你的tomcat文件夹的webapps文件夹下，再    运行bin目录下的starup.bat文件就能通过postman访问8080端口去操作了哦！</p><p>&#160;&#160;&#160;&#160;大功告成！是不是很简单？(ಡωಡ)(ಡωಡ)自己弄的小心遇到坑哦！</p>]]></content>
    
    <summary type="html">
    
      &lt;!-- toc --&gt;
&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;作为刚入职的小菜鸟，需要学的东西很多，最近开始看框架方面的知识，了解到目前使用比较多的框架，springboot+Mybatis就是其中一个，这篇文章就是为了整理一下springboot+Mybatis框架使用的知识，写一个小demo，不足之处希望各位指点。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="springboot" scheme="http://yoursite.com/tags/springboot/"/>
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis学习笔记</title>
    <link href="http://yoursite.com/2018/08/28/Mybatis/"/>
    <id>http://yoursite.com/2018/08/28/Mybatis/</id>
    <published>2018-08-28T00:56:37.000Z</published>
    <updated>2018-08-29T09:18:33.724Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;又开始了一个新的学习过程，这次是一个自用的Mybatis学习笔记，作为java基础不太牢靠的我，学习框架是有些吃力的，还是要记笔记的，想想好多博客大牛都是用博客来发表技术文章的，而我却是用来记笔记，有些惭愧。好了，闲话不多说，开始记笔记吧。</p><a id="more"></a><h2 id="Mybatis是什么？"><a href="#Mybatis是什么？" class="headerlink" title="Mybatis是什么？"></a>Mybatis是什么？</h2><p>&#160; &#160; &#160; &#160;Mybatis是一个持久层的框架，是Apache下的顶级项目。Mybatis可以从<a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">github</a>上下载.<br>&#160; &#160; &#160; &#160;Mybatis可以让程序员的大部分精力都放在写sql语句上，通过映射的方式半自动化地生成满足需要的sql语句。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Mybatis可以将向PreparedStatement中的输入参数自动进行映射，将查询结果集灵活映射出java对象（输出映射）。</p><h2 id="入门程序"><a href="#入门程序" class="headerlink" title="入门程序"></a>入门程序</h2><h3 id="需求："><a href="#需求：" class="headerlink" title="需求："></a>需求：</h3><ul><li>根据id（主键）查询用户信息</li><li>根据用户名模糊查询用户信息</li><li>添加用户</li><li>删除用户</li><li>更新用户</li></ul><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>&#160; &#160; &#160; &#160;<strong>java/idea/mysql</strong><br>&#160; &#160; &#160; &#160;Mybatis：依赖包、核心包、mysql驱动包</p><h3 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h3><p><img src="/image/MbtsPjStrt.PNG" alt="MbtsPjStrt"></p><h3 id="log4j-properties"><a href="#log4j-properties" class="headerlink" title="log4j.properties"></a>log4j.properties</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;又开始了一个新的学习过程，这次是一个自用的Mybatis学习笔记，作为java基础不太牢靠的我，学习框架是有些吃力的，还是要记笔记的，想想好多博客大牛都是用博客来发表技术文章的，而我却是用来记笔记，有些惭愧。好了，闲话不多说，开始记笔记吧。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="mybatis" scheme="http://yoursite.com/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>hello，Hexo</title>
    <link href="http://yoursite.com/2018/08/27/hello/"/>
    <id>http://yoursite.com/2018/08/27/hello/</id>
    <published>2018-08-27T03:43:46.000Z</published>
    <updated>2018-08-29T03:35:57.536Z</updated>
    
    <content type="html"><![CDATA[<hr><p>&#160; &#160; &#160; &#160;你好，hexo。这是我的第一篇博客，在IT行业中有一句很有意思的话，叫：从入门到入坟。我猜大概意思就是在这个行业中竞争太激烈，需要学习的内容太多，一辈子都学不完。当然，也许真的一辈子都学不完，但提升自己总是没法避免的。<br><a id="more"></a></p><h2 id="为什么要创建博客？"><a href="#为什么要创建博客？" class="headerlink" title="为什么要创建博客？"></a>为什么要创建博客？</h2><p>&#160; &#160; &#160; &#160;作为已经入行三周的java菜鸟来说，学习java的过程中效率低下是一个很令人困扰的问题。我希望通过写博客的方式来提升自己的学习效率。</p><h2 id="写博客有什么好处？"><a href="#写博客有什么好处？" class="headerlink" title="写博客有什么好处？"></a>写博客有什么好处？</h2><p>&#160; &#160; &#160; &#160;虽然这是我的第一篇博客，但我认为写博客可以加深自己学习的记忆，可以记录自己在学习和工作过程中遇到的坑，对于提升自己是有很大的帮助的。</p>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;&amp;#160; &amp;#160; &amp;#160; &amp;#160;你好，hexo。这是我的第一篇博客，在IT行业中有一句很有意思的话，叫：从入门到入坟。我猜大概意思就是在这个行业中竞争太激烈，需要学习的内容太多，一辈子都学不完。当然，也许真的一辈子都学不完，但提升自己总是没法避免的。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
